# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.money import Money  # noqa: F401,E501


class WalletResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owners': 'list[str]',
        'balance': 'Money',
        'funds_type': 'str',
        'description': 'str',
        'currency': 'str',
        'id': 'str',
        'creation_date': 'int',
        'tag': 'str'
    }

    attribute_map = {
        'owners': 'Owners',
        'balance': 'Balance',
        'funds_type': 'FundsType',
        'description': 'Description',
        'currency': 'Currency',
        'id': 'Id',
        'creation_date': 'CreationDate',
        'tag': 'Tag'
    }

    def __init__(self, owners=None, balance=None, funds_type=None, description=None, currency=None, id=None, creation_date=None, tag=None):  # noqa: E501
        """WalletResponse - a model defined in Swagger"""  # noqa: E501

        self._owners = None
        self._balance = None
        self._funds_type = None
        self._description = None
        self._currency = None
        self._id = None
        self._creation_date = None
        self._tag = None
        self.discriminator = None

        if owners is not None:
            self.owners = owners
        if balance is not None:
            self.balance = balance
        if funds_type is not None:
            self.funds_type = funds_type
        if description is not None:
            self.description = description
        if currency is not None:
            self.currency = currency
        if id is not None:
            self.id = id
        if creation_date is not None:
            self.creation_date = creation_date
        if tag is not None:
            self.tag = tag

    @property
    def owners(self):
        """Gets the owners of this WalletResponse.  # noqa: E501


        :return: The owners of this WalletResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this WalletResponse.


        :param owners: The owners of this WalletResponse.  # noqa: E501
        :type: list[str]
        """

        self._owners = owners

    @property
    def balance(self):
        """Gets the balance of this WalletResponse.  # noqa: E501


        :return: The balance of this WalletResponse.  # noqa: E501
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this WalletResponse.


        :param balance: The balance of this WalletResponse.  # noqa: E501
        :type: Money
        """

        self._balance = balance

    @property
    def funds_type(self):
        """Gets the funds_type of this WalletResponse.  # noqa: E501


        :return: The funds_type of this WalletResponse.  # noqa: E501
        :rtype: str
        """
        return self._funds_type

    @funds_type.setter
    def funds_type(self, funds_type):
        """Sets the funds_type of this WalletResponse.


        :param funds_type: The funds_type of this WalletResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotSpecified", "DEFAULT", "FEES", "CREDIT"]  # noqa: E501
        if funds_type not in allowed_values:
            raise ValueError(
                "Invalid value for `funds_type` ({0}), must be one of {1}"  # noqa: E501
                .format(funds_type, allowed_values)
            )

        self._funds_type = funds_type

    @property
    def description(self):
        """Gets the description of this WalletResponse.  # noqa: E501


        :return: The description of this WalletResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WalletResponse.


        :param description: The description of this WalletResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def currency(self):
        """Gets the currency of this WalletResponse.  # noqa: E501


        :return: The currency of this WalletResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this WalletResponse.


        :param currency: The currency of this WalletResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotSpecified", "XXX", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XBT", "XCD", "XDR", "XFU", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "YER", "ZAR", "ZMW", "ZWD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this WalletResponse.  # noqa: E501

        The item's ID  # noqa: E501

        :return: The id of this WalletResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WalletResponse.

        The item's ID  # noqa: E501

        :param id: The id of this WalletResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def creation_date(self):
        """Gets the creation_date of this WalletResponse.  # noqa: E501

        When the item was created  # noqa: E501

        :return: The creation_date of this WalletResponse.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this WalletResponse.

        When the item was created  # noqa: E501

        :param creation_date: The creation_date of this WalletResponse.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def tag(self):
        """Gets the tag of this WalletResponse.  # noqa: E501

        Custom data that you can add to this item  # noqa: E501

        :return: The tag of this WalletResponse.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this WalletResponse.

        Custom data that you can add to this item  # noqa: E501

        :param tag: The tag of this WalletResponse.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
