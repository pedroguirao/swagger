# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentAddonPaymentsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'acccount': 'str',
        'statement_description': 'str',
        'is3d_secure': 'bool'
    }

    attribute_map = {
        'order_id': 'OrderId',
        'acccount': 'Acccount',
        'statement_description': 'StatementDescription',
        'is3d_secure': 'Is3dSecure'
    }

    def __init__(self, order_id=None, acccount=None, statement_description=None, is3d_secure=None):  # noqa: E501
        """PaymentAddonPaymentsData - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._acccount = None
        self._statement_description = None
        self._is3d_secure = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if acccount is not None:
            self.acccount = acccount
        if statement_description is not None:
            self.statement_description = statement_description
        if is3d_secure is not None:
            self.is3d_secure = is3d_secure

    @property
    def order_id(self):
        """Gets the order_id of this PaymentAddonPaymentsData.  # noqa: E501


        :return: The order_id of this PaymentAddonPaymentsData.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentAddonPaymentsData.


        :param order_id: The order_id of this PaymentAddonPaymentsData.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def acccount(self):
        """Gets the acccount of this PaymentAddonPaymentsData.  # noqa: E501


        :return: The acccount of this PaymentAddonPaymentsData.  # noqa: E501
        :rtype: str
        """
        return self._acccount

    @acccount.setter
    def acccount(self, acccount):
        """Sets the acccount of this PaymentAddonPaymentsData.


        :param acccount: The acccount of this PaymentAddonPaymentsData.  # noqa: E501
        :type: str
        """

        self._acccount = acccount

    @property
    def statement_description(self):
        """Gets the statement_description of this PaymentAddonPaymentsData.  # noqa: E501


        :return: The statement_description of this PaymentAddonPaymentsData.  # noqa: E501
        :rtype: str
        """
        return self._statement_description

    @statement_description.setter
    def statement_description(self, statement_description):
        """Sets the statement_description of this PaymentAddonPaymentsData.


        :param statement_description: The statement_description of this PaymentAddonPaymentsData.  # noqa: E501
        :type: str
        """

        self._statement_description = statement_description

    @property
    def is3d_secure(self):
        """Gets the is3d_secure of this PaymentAddonPaymentsData.  # noqa: E501


        :return: The is3d_secure of this PaymentAddonPaymentsData.  # noqa: E501
        :rtype: bool
        """
        return self._is3d_secure

    @is3d_secure.setter
    def is3d_secure(self, is3d_secure):
        """Sets the is3d_secure of this PaymentAddonPaymentsData.


        :param is3d_secure: The is3d_secure of this PaymentAddonPaymentsData.  # noqa: E501
        :type: bool
        """

        self._is3d_secure = is3d_secure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentAddonPaymentsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentAddonPaymentsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
