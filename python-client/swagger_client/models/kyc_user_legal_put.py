# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.address import Address  # noqa: F401,E501
from swagger_client.models.telephone import Telephone  # noqa: F401,E501


class KycUserLegalPut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'telephone': 'Telephone',
        'contact_first_name': 'str',
        'contact_last_name': 'str',
        'fiscal_id': 'str',
        'country': 'str',
        'fiscal_address': 'Address',
        'legal_person_type': 'str',
        'email': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'telephone': 'Telephone',
        'contact_first_name': 'ContactFirstName',
        'contact_last_name': 'ContactLastName',
        'fiscal_id': 'FiscalId',
        'country': 'Country',
        'fiscal_address': 'FiscalAddress',
        'legal_person_type': 'LegalPersonType',
        'email': 'Email',
        'tag': 'Tag'
    }

    def __init__(self, name=None, telephone=None, contact_first_name=None, contact_last_name=None, fiscal_id=None, country=None, fiscal_address=None, legal_person_type=None, email=None, tag=None):  # noqa: E501
        """KycUserLegalPut - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._telephone = None
        self._contact_first_name = None
        self._contact_last_name = None
        self._fiscal_id = None
        self._country = None
        self._fiscal_address = None
        self._legal_person_type = None
        self._email = None
        self._tag = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if telephone is not None:
            self.telephone = telephone
        if contact_first_name is not None:
            self.contact_first_name = contact_first_name
        if contact_last_name is not None:
            self.contact_last_name = contact_last_name
        if fiscal_id is not None:
            self.fiscal_id = fiscal_id
        if country is not None:
            self.country = country
        if fiscal_address is not None:
            self.fiscal_address = fiscal_address
        if legal_person_type is not None:
            self.legal_person_type = legal_person_type
        if email is not None:
            self.email = email
        if tag is not None:
            self.tag = tag

    @property
    def name(self):
        """Gets the name of this KycUserLegalPut.  # noqa: E501

        The name of the legal user  # noqa: E501

        :return: The name of this KycUserLegalPut.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KycUserLegalPut.

        The name of the legal user  # noqa: E501

        :param name: The name of this KycUserLegalPut.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def telephone(self):
        """Gets the telephone of this KycUserLegalPut.  # noqa: E501


        :return: The telephone of this KycUserLegalPut.  # noqa: E501
        :rtype: Telephone
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this KycUserLegalPut.


        :param telephone: The telephone of this KycUserLegalPut.  # noqa: E501
        :type: Telephone
        """

        self._telephone = telephone

    @property
    def contact_first_name(self):
        """Gets the contact_first_name of this KycUserLegalPut.  # noqa: E501


        :return: The contact_first_name of this KycUserLegalPut.  # noqa: E501
        :rtype: str
        """
        return self._contact_first_name

    @contact_first_name.setter
    def contact_first_name(self, contact_first_name):
        """Sets the contact_first_name of this KycUserLegalPut.


        :param contact_first_name: The contact_first_name of this KycUserLegalPut.  # noqa: E501
        :type: str
        """

        self._contact_first_name = contact_first_name

    @property
    def contact_last_name(self):
        """Gets the contact_last_name of this KycUserLegalPut.  # noqa: E501


        :return: The contact_last_name of this KycUserLegalPut.  # noqa: E501
        :rtype: str
        """
        return self._contact_last_name

    @contact_last_name.setter
    def contact_last_name(self, contact_last_name):
        """Sets the contact_last_name of this KycUserLegalPut.


        :param contact_last_name: The contact_last_name of this KycUserLegalPut.  # noqa: E501
        :type: str
        """

        self._contact_last_name = contact_last_name

    @property
    def fiscal_id(self):
        """Gets the fiscal_id of this KycUserLegalPut.  # noqa: E501


        :return: The fiscal_id of this KycUserLegalPut.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_id

    @fiscal_id.setter
    def fiscal_id(self, fiscal_id):
        """Sets the fiscal_id of this KycUserLegalPut.


        :param fiscal_id: The fiscal_id of this KycUserLegalPut.  # noqa: E501
        :type: str
        """

        self._fiscal_id = fiscal_id

    @property
    def country(self):
        """Gets the country of this KycUserLegalPut.  # noqa: E501


        :return: The country of this KycUserLegalPut.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this KycUserLegalPut.


        :param country: The country of this KycUserLegalPut.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotSpecified", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"  # noqa: E501
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def fiscal_address(self):
        """Gets the fiscal_address of this KycUserLegalPut.  # noqa: E501

        he address of the company’s headquarters  # noqa: E501

        :return: The fiscal_address of this KycUserLegalPut.  # noqa: E501
        :rtype: Address
        """
        return self._fiscal_address

    @fiscal_address.setter
    def fiscal_address(self, fiscal_address):
        """Sets the fiscal_address of this KycUserLegalPut.

        he address of the company’s headquarters  # noqa: E501

        :param fiscal_address: The fiscal_address of this KycUserLegalPut.  # noqa: E501
        :type: Address
        """

        self._fiscal_address = fiscal_address

    @property
    def legal_person_type(self):
        """Gets the legal_person_type of this KycUserLegalPut.  # noqa: E501

        The type of legal user  # noqa: E501

        :return: The legal_person_type of this KycUserLegalPut.  # noqa: E501
        :rtype: str
        """
        return self._legal_person_type

    @legal_person_type.setter
    def legal_person_type(self, legal_person_type):
        """Sets the legal_person_type of this KycUserLegalPut.

        The type of legal user  # noqa: E501

        :param legal_person_type: The legal_person_type of this KycUserLegalPut.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUSINESS", "ORGANIZATION", "SOLETRADER"]  # noqa: E501
        if legal_person_type not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_person_type` ({0}), must be one of {1}"  # noqa: E501
                .format(legal_person_type, allowed_values)
            )

        self._legal_person_type = legal_person_type

    @property
    def email(self):
        """Gets the email of this KycUserLegalPut.  # noqa: E501


        :return: The email of this KycUserLegalPut.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this KycUserLegalPut.


        :param email: The email of this KycUserLegalPut.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def tag(self):
        """Gets the tag of this KycUserLegalPut.  # noqa: E501

        Custom data that you can add to this item  # noqa: E501

        :return: The tag of this KycUserLegalPut.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this KycUserLegalPut.

        Custom data that you can add to this item  # noqa: E501

        :param tag: The tag of this KycUserLegalPut.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycUserLegalPut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycUserLegalPut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
