# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentWebPayData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_credit': 'bool',
        'authorization_code': 'str',
        'is_secure': 'bool',
        'payment_type_code': 'str',
        'response_code': 'int',
        'response_message': 'str',
        'voucher_url': 'str',
        'card_number': 'str',
        'transaction_date': 'int',
        'order_id': 'str'
    }

    attribute_map = {
        'is_credit': 'IsCredit',
        'authorization_code': 'AuthorizationCode',
        'is_secure': 'IsSecure',
        'payment_type_code': 'PaymentTypeCode',
        'response_code': 'ResponseCode',
        'response_message': 'ResponseMessage',
        'voucher_url': 'VoucherUrl',
        'card_number': 'CardNumber',
        'transaction_date': 'TransactionDate',
        'order_id': 'OrderId'
    }

    def __init__(self, is_credit=None, authorization_code=None, is_secure=None, payment_type_code=None, response_code=None, response_message=None, voucher_url=None, card_number=None, transaction_date=None, order_id=None):  # noqa: E501
        """PaymentWebPayData - a model defined in Swagger"""  # noqa: E501

        self._is_credit = None
        self._authorization_code = None
        self._is_secure = None
        self._payment_type_code = None
        self._response_code = None
        self._response_message = None
        self._voucher_url = None
        self._card_number = None
        self._transaction_date = None
        self._order_id = None
        self.discriminator = None

        if is_credit is not None:
            self.is_credit = is_credit
        if authorization_code is not None:
            self.authorization_code = authorization_code
        if is_secure is not None:
            self.is_secure = is_secure
        if payment_type_code is not None:
            self.payment_type_code = payment_type_code
        if response_code is not None:
            self.response_code = response_code
        if response_message is not None:
            self.response_message = response_message
        if voucher_url is not None:
            self.voucher_url = voucher_url
        if card_number is not None:
            self.card_number = card_number
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if order_id is not None:
            self.order_id = order_id

    @property
    def is_credit(self):
        """Gets the is_credit of this PaymentWebPayData.  # noqa: E501


        :return: The is_credit of this PaymentWebPayData.  # noqa: E501
        :rtype: bool
        """
        return self._is_credit

    @is_credit.setter
    def is_credit(self, is_credit):
        """Sets the is_credit of this PaymentWebPayData.


        :param is_credit: The is_credit of this PaymentWebPayData.  # noqa: E501
        :type: bool
        """

        self._is_credit = is_credit

    @property
    def authorization_code(self):
        """Gets the authorization_code of this PaymentWebPayData.  # noqa: E501


        :return: The authorization_code of this PaymentWebPayData.  # noqa: E501
        :rtype: str
        """
        return self._authorization_code

    @authorization_code.setter
    def authorization_code(self, authorization_code):
        """Sets the authorization_code of this PaymentWebPayData.


        :param authorization_code: The authorization_code of this PaymentWebPayData.  # noqa: E501
        :type: str
        """

        self._authorization_code = authorization_code

    @property
    def is_secure(self):
        """Gets the is_secure of this PaymentWebPayData.  # noqa: E501


        :return: The is_secure of this PaymentWebPayData.  # noqa: E501
        :rtype: bool
        """
        return self._is_secure

    @is_secure.setter
    def is_secure(self, is_secure):
        """Sets the is_secure of this PaymentWebPayData.


        :param is_secure: The is_secure of this PaymentWebPayData.  # noqa: E501
        :type: bool
        """

        self._is_secure = is_secure

    @property
    def payment_type_code(self):
        """Gets the payment_type_code of this PaymentWebPayData.  # noqa: E501


        :return: The payment_type_code of this PaymentWebPayData.  # noqa: E501
        :rtype: str
        """
        return self._payment_type_code

    @payment_type_code.setter
    def payment_type_code(self, payment_type_code):
        """Sets the payment_type_code of this PaymentWebPayData.


        :param payment_type_code: The payment_type_code of this PaymentWebPayData.  # noqa: E501
        :type: str
        """

        self._payment_type_code = payment_type_code

    @property
    def response_code(self):
        """Gets the response_code of this PaymentWebPayData.  # noqa: E501


        :return: The response_code of this PaymentWebPayData.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this PaymentWebPayData.


        :param response_code: The response_code of this PaymentWebPayData.  # noqa: E501
        :type: int
        """

        self._response_code = response_code

    @property
    def response_message(self):
        """Gets the response_message of this PaymentWebPayData.  # noqa: E501


        :return: The response_message of this PaymentWebPayData.  # noqa: E501
        :rtype: str
        """
        return self._response_message

    @response_message.setter
    def response_message(self, response_message):
        """Sets the response_message of this PaymentWebPayData.


        :param response_message: The response_message of this PaymentWebPayData.  # noqa: E501
        :type: str
        """

        self._response_message = response_message

    @property
    def voucher_url(self):
        """Gets the voucher_url of this PaymentWebPayData.  # noqa: E501


        :return: The voucher_url of this PaymentWebPayData.  # noqa: E501
        :rtype: str
        """
        return self._voucher_url

    @voucher_url.setter
    def voucher_url(self, voucher_url):
        """Sets the voucher_url of this PaymentWebPayData.


        :param voucher_url: The voucher_url of this PaymentWebPayData.  # noqa: E501
        :type: str
        """

        self._voucher_url = voucher_url

    @property
    def card_number(self):
        """Gets the card_number of this PaymentWebPayData.  # noqa: E501


        :return: The card_number of this PaymentWebPayData.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this PaymentWebPayData.


        :param card_number: The card_number of this PaymentWebPayData.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def transaction_date(self):
        """Gets the transaction_date of this PaymentWebPayData.  # noqa: E501


        :return: The transaction_date of this PaymentWebPayData.  # noqa: E501
        :rtype: int
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this PaymentWebPayData.


        :param transaction_date: The transaction_date of this PaymentWebPayData.  # noqa: E501
        :type: int
        """

        self._transaction_date = transaction_date

    @property
    def order_id(self):
        """Gets the order_id of this PaymentWebPayData.  # noqa: E501


        :return: The order_id of this PaymentWebPayData.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentWebPayData.


        :param order_id: The order_id of this PaymentWebPayData.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentWebPayData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentWebPayData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
