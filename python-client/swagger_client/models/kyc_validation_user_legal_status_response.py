# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.kyc_board_member_container_dto import KycBoardMemberContainerDto  # noqa: F401,E501
from swagger_client.models.kyc_legal_user_data_dto import KycLegalUserDataDto  # noqa: F401,E501
from swagger_client.models.kyc_share_holder_container_dto import KycShareHolderContainerDto  # noqa: F401,E501
from swagger_client.models.kyc_validation_per_level_status import KycValidationPerLevelStatus  # noqa: F401,E501


class KycValidationUserLegalStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shareholders': 'list[KycShareHolderContainerDto]',
        'board_members': 'list[KycBoardMemberContainerDto]',
        'validations': 'list[KycValidationPerLevelStatus]',
        'user_data': 'KycLegalUserDataDto',
        'kyc_level_override': 'str',
        'kyc_level_override_reason': 'str'
    }

    attribute_map = {
        'shareholders': 'Shareholders',
        'board_members': 'BoardMembers',
        'validations': 'Validations',
        'user_data': 'UserData',
        'kyc_level_override': 'KycLevelOverride',
        'kyc_level_override_reason': 'KycLevelOverrideReason'
    }

    def __init__(self, shareholders=None, board_members=None, validations=None, user_data=None, kyc_level_override=None, kyc_level_override_reason=None):  # noqa: E501
        """KycValidationUserLegalStatusResponse - a model defined in Swagger"""  # noqa: E501

        self._shareholders = None
        self._board_members = None
        self._validations = None
        self._user_data = None
        self._kyc_level_override = None
        self._kyc_level_override_reason = None
        self.discriminator = None

        if shareholders is not None:
            self.shareholders = shareholders
        if board_members is not None:
            self.board_members = board_members
        if validations is not None:
            self.validations = validations
        if user_data is not None:
            self.user_data = user_data
        if kyc_level_override is not None:
            self.kyc_level_override = kyc_level_override
        if kyc_level_override_reason is not None:
            self.kyc_level_override_reason = kyc_level_override_reason

    @property
    def shareholders(self):
        """Gets the shareholders of this KycValidationUserLegalStatusResponse.  # noqa: E501


        :return: The shareholders of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :rtype: list[KycShareHolderContainerDto]
        """
        return self._shareholders

    @shareholders.setter
    def shareholders(self, shareholders):
        """Sets the shareholders of this KycValidationUserLegalStatusResponse.


        :param shareholders: The shareholders of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :type: list[KycShareHolderContainerDto]
        """

        self._shareholders = shareholders

    @property
    def board_members(self):
        """Gets the board_members of this KycValidationUserLegalStatusResponse.  # noqa: E501


        :return: The board_members of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :rtype: list[KycBoardMemberContainerDto]
        """
        return self._board_members

    @board_members.setter
    def board_members(self, board_members):
        """Sets the board_members of this KycValidationUserLegalStatusResponse.


        :param board_members: The board_members of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :type: list[KycBoardMemberContainerDto]
        """

        self._board_members = board_members

    @property
    def validations(self):
        """Gets the validations of this KycValidationUserLegalStatusResponse.  # noqa: E501


        :return: The validations of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :rtype: list[KycValidationPerLevelStatus]
        """
        return self._validations

    @validations.setter
    def validations(self, validations):
        """Sets the validations of this KycValidationUserLegalStatusResponse.


        :param validations: The validations of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :type: list[KycValidationPerLevelStatus]
        """

        self._validations = validations

    @property
    def user_data(self):
        """Gets the user_data of this KycValidationUserLegalStatusResponse.  # noqa: E501


        :return: The user_data of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :rtype: KycLegalUserDataDto
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this KycValidationUserLegalStatusResponse.


        :param user_data: The user_data of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :type: KycLegalUserDataDto
        """

        self._user_data = user_data

    @property
    def kyc_level_override(self):
        """Gets the kyc_level_override of this KycValidationUserLegalStatusResponse.  # noqa: E501


        :return: The kyc_level_override of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._kyc_level_override

    @kyc_level_override.setter
    def kyc_level_override(self, kyc_level_override):
        """Sets the kyc_level_override of this KycValidationUserLegalStatusResponse.


        :param kyc_level_override: The kyc_level_override of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUPERLIGHT_SERVICE", "LIGHT_SERVICE", "LIGHT_CROUDFUNDING", "STRONG_CROWDFUNDING"]  # noqa: E501
        if kyc_level_override not in allowed_values:
            raise ValueError(
                "Invalid value for `kyc_level_override` ({0}), must be one of {1}"  # noqa: E501
                .format(kyc_level_override, allowed_values)
            )

        self._kyc_level_override = kyc_level_override

    @property
    def kyc_level_override_reason(self):
        """Gets the kyc_level_override_reason of this KycValidationUserLegalStatusResponse.  # noqa: E501


        :return: The kyc_level_override_reason of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._kyc_level_override_reason

    @kyc_level_override_reason.setter
    def kyc_level_override_reason(self, kyc_level_override_reason):
        """Sets the kyc_level_override_reason of this KycValidationUserLegalStatusResponse.


        :param kyc_level_override_reason: The kyc_level_override_reason of this KycValidationUserLegalStatusResponse.  # noqa: E501
        :type: str
        """

        self._kyc_level_override_reason = kyc_level_override_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycValidationUserLegalStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycValidationUserLegalStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
