# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.property_validation_country import PropertyValidationCountry  # noqa: F401,E501
from swagger_client.models.property_validation_date_nullable import PropertyValidationDateNullable  # noqa: F401,E501
from swagger_client.models.property_validation_string import PropertyValidationString  # noqa: F401,E501
from swagger_client.models.t_address_validation_result import TAddressValidationResult  # noqa: F401,E501
from swagger_client.models.t_kyc_file_details import TKycFileDetails  # noqa: F401,E501
from swagger_client.models.t_telephone_validation_result import TTelephoneValidationResult  # noqa: F401,E501


class KycBoardMemberContainerDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'country_of_residence': 'PropertyValidationCountry',
        'nationality': 'PropertyValidationCountry',
        'email': 'PropertyValidationString',
        'first_name': 'PropertyValidationString',
        'last_name': 'PropertyValidationString',
        'id_card': 'PropertyValidationString',
        'id_card_document': 'TKycFileDetails',
        'telephone': 'TTelephoneValidationResult',
        'address': 'TAddressValidationResult',
        'occupation': 'PropertyValidationString',
        'power_of_attorney': 'TKycFileDetails',
        'birthday': 'PropertyValidationDateNullable'
    }

    attribute_map = {
        'id': 'Id',
        'country_of_residence': 'CountryOfResidence',
        'nationality': 'Nationality',
        'email': 'Email',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'id_card': 'IdCard',
        'id_card_document': 'IdCardDocument',
        'telephone': 'Telephone',
        'address': 'Address',
        'occupation': 'Occupation',
        'power_of_attorney': 'PowerOfAttorney',
        'birthday': 'Birthday'
    }

    def __init__(self, id=None, country_of_residence=None, nationality=None, email=None, first_name=None, last_name=None, id_card=None, id_card_document=None, telephone=None, address=None, occupation=None, power_of_attorney=None, birthday=None):  # noqa: E501
        """KycBoardMemberContainerDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._country_of_residence = None
        self._nationality = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._id_card = None
        self._id_card_document = None
        self._telephone = None
        self._address = None
        self._occupation = None
        self._power_of_attorney = None
        self._birthday = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if country_of_residence is not None:
            self.country_of_residence = country_of_residence
        if nationality is not None:
            self.nationality = nationality
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if id_card is not None:
            self.id_card = id_card
        if id_card_document is not None:
            self.id_card_document = id_card_document
        if telephone is not None:
            self.telephone = telephone
        if address is not None:
            self.address = address
        if occupation is not None:
            self.occupation = occupation
        if power_of_attorney is not None:
            self.power_of_attorney = power_of_attorney
        if birthday is not None:
            self.birthday = birthday

    @property
    def id(self):
        """Gets the id of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The id of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KycBoardMemberContainerDto.


        :param id: The id of this KycBoardMemberContainerDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def country_of_residence(self):
        """Gets the country_of_residence of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The country_of_residence of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: PropertyValidationCountry
        """
        return self._country_of_residence

    @country_of_residence.setter
    def country_of_residence(self, country_of_residence):
        """Sets the country_of_residence of this KycBoardMemberContainerDto.


        :param country_of_residence: The country_of_residence of this KycBoardMemberContainerDto.  # noqa: E501
        :type: PropertyValidationCountry
        """

        self._country_of_residence = country_of_residence

    @property
    def nationality(self):
        """Gets the nationality of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The nationality of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: PropertyValidationCountry
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this KycBoardMemberContainerDto.


        :param nationality: The nationality of this KycBoardMemberContainerDto.  # noqa: E501
        :type: PropertyValidationCountry
        """

        self._nationality = nationality

    @property
    def email(self):
        """Gets the email of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The email of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this KycBoardMemberContainerDto.


        :param email: The email of this KycBoardMemberContainerDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The first_name of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this KycBoardMemberContainerDto.


        :param first_name: The first_name of this KycBoardMemberContainerDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The last_name of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this KycBoardMemberContainerDto.


        :param last_name: The last_name of this KycBoardMemberContainerDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._last_name = last_name

    @property
    def id_card(self):
        """Gets the id_card of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The id_card of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._id_card

    @id_card.setter
    def id_card(self, id_card):
        """Sets the id_card of this KycBoardMemberContainerDto.


        :param id_card: The id_card of this KycBoardMemberContainerDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._id_card = id_card

    @property
    def id_card_document(self):
        """Gets the id_card_document of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The id_card_document of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: TKycFileDetails
        """
        return self._id_card_document

    @id_card_document.setter
    def id_card_document(self, id_card_document):
        """Sets the id_card_document of this KycBoardMemberContainerDto.


        :param id_card_document: The id_card_document of this KycBoardMemberContainerDto.  # noqa: E501
        :type: TKycFileDetails
        """

        self._id_card_document = id_card_document

    @property
    def telephone(self):
        """Gets the telephone of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The telephone of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: TTelephoneValidationResult
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this KycBoardMemberContainerDto.


        :param telephone: The telephone of this KycBoardMemberContainerDto.  # noqa: E501
        :type: TTelephoneValidationResult
        """

        self._telephone = telephone

    @property
    def address(self):
        """Gets the address of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The address of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: TAddressValidationResult
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this KycBoardMemberContainerDto.


        :param address: The address of this KycBoardMemberContainerDto.  # noqa: E501
        :type: TAddressValidationResult
        """

        self._address = address

    @property
    def occupation(self):
        """Gets the occupation of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The occupation of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this KycBoardMemberContainerDto.


        :param occupation: The occupation of this KycBoardMemberContainerDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._occupation = occupation

    @property
    def power_of_attorney(self):
        """Gets the power_of_attorney of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The power_of_attorney of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: TKycFileDetails
        """
        return self._power_of_attorney

    @power_of_attorney.setter
    def power_of_attorney(self, power_of_attorney):
        """Sets the power_of_attorney of this KycBoardMemberContainerDto.


        :param power_of_attorney: The power_of_attorney of this KycBoardMemberContainerDto.  # noqa: E501
        :type: TKycFileDetails
        """

        self._power_of_attorney = power_of_attorney

    @property
    def birthday(self):
        """Gets the birthday of this KycBoardMemberContainerDto.  # noqa: E501


        :return: The birthday of this KycBoardMemberContainerDto.  # noqa: E501
        :rtype: PropertyValidationDateNullable
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this KycBoardMemberContainerDto.


        :param birthday: The birthday of this KycBoardMemberContainerDto.  # noqa: E501
        :type: PropertyValidationDateNullable
        """

        self._birthday = birthday

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycBoardMemberContainerDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycBoardMemberContainerDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
