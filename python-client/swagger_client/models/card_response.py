# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CardResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'expiration_date': 'str',
        'alias': 'str',
        'card_provider': 'str',
        'card_type': 'str',
        'country': 'str',
        'product': 'str',
        'bank_code': 'str',
        'active': 'bool',
        'currency': 'str',
        'validity': 'str',
        'provider_name': 'str',
        'id': 'str',
        'creation_date': 'int',
        'tag': 'str'
    }

    attribute_map = {
        'user_id': 'UserId',
        'expiration_date': 'ExpirationDate',
        'alias': 'Alias',
        'card_provider': 'CardProvider',
        'card_type': 'CardType',
        'country': 'Country',
        'product': 'Product',
        'bank_code': 'BankCode',
        'active': 'Active',
        'currency': 'Currency',
        'validity': 'Validity',
        'provider_name': 'ProviderName',
        'id': 'Id',
        'creation_date': 'CreationDate',
        'tag': 'Tag'
    }

    def __init__(self, user_id=None, expiration_date=None, alias=None, card_provider=None, card_type=None, country=None, product=None, bank_code=None, active=None, currency=None, validity=None, provider_name=None, id=None, creation_date=None, tag=None):  # noqa: E501
        """CardResponse - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._expiration_date = None
        self._alias = None
        self._card_provider = None
        self._card_type = None
        self._country = None
        self._product = None
        self._bank_code = None
        self._active = None
        self._currency = None
        self._validity = None
        self._provider_name = None
        self._id = None
        self._creation_date = None
        self._tag = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if alias is not None:
            self.alias = alias
        if card_provider is not None:
            self.card_provider = card_provider
        if card_type is not None:
            self.card_type = card_type
        if country is not None:
            self.country = country
        if product is not None:
            self.product = product
        if bank_code is not None:
            self.bank_code = bank_code
        if active is not None:
            self.active = active
        if currency is not None:
            self.currency = currency
        if validity is not None:
            self.validity = validity
        if provider_name is not None:
            self.provider_name = provider_name
        if id is not None:
            self.id = id
        if creation_date is not None:
            self.creation_date = creation_date
        if tag is not None:
            self.tag = tag

    @property
    def user_id(self):
        """Gets the user_id of this CardResponse.  # noqa: E501

        The object owner's UserId  # noqa: E501

        :return: The user_id of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CardResponse.

        The object owner's UserId  # noqa: E501

        :param user_id: The user_id of this CardResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CardResponse.  # noqa: E501

        The expiry date of the card - must be in format MMYY  # noqa: E501

        :return: The expiration_date of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CardResponse.

        The expiry date of the card - must be in format MMYY  # noqa: E501

        :param expiration_date: The expiration_date of this CardResponse.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def alias(self):
        """Gets the alias of this CardResponse.  # noqa: E501

        A partially obfuscated version of the credit card number  # noqa: E501

        :return: The alias of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this CardResponse.

        A partially obfuscated version of the credit card number  # noqa: E501

        :param alias: The alias of this CardResponse.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def card_provider(self):
        """Gets the card_provider of this CardResponse.  # noqa: E501

        The provider of the card  # noqa: E501

        :return: The card_provider of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._card_provider

    @card_provider.setter
    def card_provider(self, card_provider):
        """Sets the card_provider of this CardResponse.

        The provider of the card  # noqa: E501

        :param card_provider: The card_provider of this CardResponse.  # noqa: E501
        :type: str
        """

        self._card_provider = card_provider

    @property
    def card_type(self):
        """Gets the card_type of this CardResponse.  # noqa: E501

        The type of card  # noqa: E501

        :return: The card_type of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CardResponse.

        The type of card  # noqa: E501

        :param card_type: The card_type of this CardResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotSpecified", "CB_VISA_MASTERCARD", "AMEX", "DINERS", "MASTERPASS", "MAESTRO", "P24", "IDEAL", "BCMC", "PAYLIB"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def country(self):
        """Gets the country of this CardResponse.  # noqa: E501

        The Country where the bank account is held  # noqa: E501

        :return: The country of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CardResponse.

        The Country where the bank account is held  # noqa: E501

        :param country: The country of this CardResponse.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def product(self):
        """Gets the product of this CardResponse.  # noqa: E501

        The card product type  # noqa: E501

        :return: The product of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CardResponse.

        The card product type  # noqa: E501

        :param product: The product of this CardResponse.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def bank_code(self):
        """Gets the bank_code of this CardResponse.  # noqa: E501

          # noqa: E501

        :return: The bank_code of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this CardResponse.

          # noqa: E501

        :param bank_code: The bank_code of this CardResponse.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def active(self):
        """Gets the active of this CardResponse.  # noqa: E501

        Whether the card is active or not  # noqa: E501

        :return: The active of this CardResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CardResponse.

        Whether the card is active or not  # noqa: E501

        :param active: The active of this CardResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def currency(self):
        """Gets the currency of this CardResponse.  # noqa: E501

        The currency - should be ISO_4217 format  # noqa: E501

        :return: The currency of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CardResponse.

        The currency - should be ISO_4217 format  # noqa: E501

        :param currency: The currency of this CardResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotSpecified", "XXX", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XBT", "XCD", "XDR", "XFU", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "YER", "ZAR", "ZMW", "ZWD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def validity(self):
        """Gets the validity of this CardResponse.  # noqa: E501

        Whether the card is valid or not. Once they process (or attempt to process) a payment with the card we are able to indicate if it is \"valid\" or \"invalid\". If they didn’t process a payment yet the \"Validity\" stay at \"unknown\"  # noqa: E501

        :return: The validity of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this CardResponse.

        Whether the card is valid or not. Once they process (or attempt to process) a payment with the card we are able to indicate if it is \"valid\" or \"invalid\". If they didn’t process a payment yet the \"Validity\" stay at \"unknown\"  # noqa: E501

        :param validity: The validity of this CardResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotSpecified", "UNKNOWN", "VALID", "INVALID"]  # noqa: E501
        if validity not in allowed_values:
            raise ValueError(
                "Invalid value for `validity` ({0}), must be one of {1}"  # noqa: E501
                .format(validity, allowed_values)
            )

        self._validity = validity

    @property
    def provider_name(self):
        """Gets the provider_name of this CardResponse.  # noqa: E501


        :return: The provider_name of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this CardResponse.


        :param provider_name: The provider_name of this CardResponse.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def id(self):
        """Gets the id of this CardResponse.  # noqa: E501

        The item's ID  # noqa: E501

        :return: The id of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CardResponse.

        The item's ID  # noqa: E501

        :param id: The id of this CardResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def creation_date(self):
        """Gets the creation_date of this CardResponse.  # noqa: E501

        When the item was created  # noqa: E501

        :return: The creation_date of this CardResponse.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CardResponse.

        When the item was created  # noqa: E501

        :param creation_date: The creation_date of this CardResponse.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def tag(self):
        """Gets the tag of this CardResponse.  # noqa: E501

        Custom data that you can add to this item  # noqa: E501

        :return: The tag of this CardResponse.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CardResponse.

        Custom data that you can add to this item  # noqa: E501

        :param tag: The tag of this CardResponse.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
