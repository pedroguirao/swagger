# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.aplazame_order_item import AplazameOrderItem  # noqa: F401,E501
from swagger_client.models.customer import Customer  # noqa: F401,E501
from swagger_client.models.money import Money  # noqa: F401,E501


class AplazamePayByWebPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag': 'str',
        'user_id': 'int',
        'credited_wallet_id': 'str',
        'debited_funds': 'Money',
        'fees': 'Money',
        'shipping': 'Money',
        'cancel_url': 'str',
        'success_url': 'str',
        'checkout_url': 'str',
        'order_items': 'list[AplazameOrderItem]',
        'customer': 'Customer'
    }

    attribute_map = {
        'tag': 'Tag',
        'user_id': 'UserId',
        'credited_wallet_id': 'CreditedWalletId',
        'debited_funds': 'DebitedFunds',
        'fees': 'Fees',
        'shipping': 'Shipping',
        'cancel_url': 'CancelUrl',
        'success_url': 'SuccessUrl',
        'checkout_url': 'CheckoutUrl',
        'order_items': 'OrderItems',
        'customer': 'Customer'
    }

    def __init__(self, tag=None, user_id=None, credited_wallet_id=None, debited_funds=None, fees=None, shipping=None, cancel_url=None, success_url=None, checkout_url=None, order_items=None, customer=None):  # noqa: E501
        """AplazamePayByWebPost - a model defined in Swagger"""  # noqa: E501

        self._tag = None
        self._user_id = None
        self._credited_wallet_id = None
        self._debited_funds = None
        self._fees = None
        self._shipping = None
        self._cancel_url = None
        self._success_url = None
        self._checkout_url = None
        self._order_items = None
        self._customer = None
        self.discriminator = None

        if tag is not None:
            self.tag = tag
        if user_id is not None:
            self.user_id = user_id
        if credited_wallet_id is not None:
            self.credited_wallet_id = credited_wallet_id
        self.debited_funds = debited_funds
        if fees is not None:
            self.fees = fees
        if shipping is not None:
            self.shipping = shipping
        self.cancel_url = cancel_url
        self.success_url = success_url
        if checkout_url is not None:
            self.checkout_url = checkout_url
        self.order_items = order_items
        self.customer = customer

    @property
    def tag(self):
        """Gets the tag of this AplazamePayByWebPost.  # noqa: E501


        :return: The tag of this AplazamePayByWebPost.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this AplazamePayByWebPost.


        :param tag: The tag of this AplazamePayByWebPost.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def user_id(self):
        """Gets the user_id of this AplazamePayByWebPost.  # noqa: E501


        :return: The user_id of this AplazamePayByWebPost.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AplazamePayByWebPost.


        :param user_id: The user_id of this AplazamePayByWebPost.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def credited_wallet_id(self):
        """Gets the credited_wallet_id of this AplazamePayByWebPost.  # noqa: E501


        :return: The credited_wallet_id of this AplazamePayByWebPost.  # noqa: E501
        :rtype: str
        """
        return self._credited_wallet_id

    @credited_wallet_id.setter
    def credited_wallet_id(self, credited_wallet_id):
        """Sets the credited_wallet_id of this AplazamePayByWebPost.


        :param credited_wallet_id: The credited_wallet_id of this AplazamePayByWebPost.  # noqa: E501
        :type: str
        """

        self._credited_wallet_id = credited_wallet_id

    @property
    def debited_funds(self):
        """Gets the debited_funds of this AplazamePayByWebPost.  # noqa: E501


        :return: The debited_funds of this AplazamePayByWebPost.  # noqa: E501
        :rtype: Money
        """
        return self._debited_funds

    @debited_funds.setter
    def debited_funds(self, debited_funds):
        """Sets the debited_funds of this AplazamePayByWebPost.


        :param debited_funds: The debited_funds of this AplazamePayByWebPost.  # noqa: E501
        :type: Money
        """
        if debited_funds is None:
            raise ValueError("Invalid value for `debited_funds`, must not be `None`")  # noqa: E501

        self._debited_funds = debited_funds

    @property
    def fees(self):
        """Gets the fees of this AplazamePayByWebPost.  # noqa: E501


        :return: The fees of this AplazamePayByWebPost.  # noqa: E501
        :rtype: Money
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this AplazamePayByWebPost.


        :param fees: The fees of this AplazamePayByWebPost.  # noqa: E501
        :type: Money
        """

        self._fees = fees

    @property
    def shipping(self):
        """Gets the shipping of this AplazamePayByWebPost.  # noqa: E501


        :return: The shipping of this AplazamePayByWebPost.  # noqa: E501
        :rtype: Money
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this AplazamePayByWebPost.


        :param shipping: The shipping of this AplazamePayByWebPost.  # noqa: E501
        :type: Money
        """

        self._shipping = shipping

    @property
    def cancel_url(self):
        """Gets the cancel_url of this AplazamePayByWebPost.  # noqa: E501


        :return: The cancel_url of this AplazamePayByWebPost.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this AplazamePayByWebPost.


        :param cancel_url: The cancel_url of this AplazamePayByWebPost.  # noqa: E501
        :type: str
        """
        if cancel_url is None:
            raise ValueError("Invalid value for `cancel_url`, must not be `None`")  # noqa: E501

        self._cancel_url = cancel_url

    @property
    def success_url(self):
        """Gets the success_url of this AplazamePayByWebPost.  # noqa: E501


        :return: The success_url of this AplazamePayByWebPost.  # noqa: E501
        :rtype: str
        """
        return self._success_url

    @success_url.setter
    def success_url(self, success_url):
        """Sets the success_url of this AplazamePayByWebPost.


        :param success_url: The success_url of this AplazamePayByWebPost.  # noqa: E501
        :type: str
        """
        if success_url is None:
            raise ValueError("Invalid value for `success_url`, must not be `None`")  # noqa: E501

        self._success_url = success_url

    @property
    def checkout_url(self):
        """Gets the checkout_url of this AplazamePayByWebPost.  # noqa: E501


        :return: The checkout_url of this AplazamePayByWebPost.  # noqa: E501
        :rtype: str
        """
        return self._checkout_url

    @checkout_url.setter
    def checkout_url(self, checkout_url):
        """Sets the checkout_url of this AplazamePayByWebPost.


        :param checkout_url: The checkout_url of this AplazamePayByWebPost.  # noqa: E501
        :type: str
        """

        self._checkout_url = checkout_url

    @property
    def order_items(self):
        """Gets the order_items of this AplazamePayByWebPost.  # noqa: E501


        :return: The order_items of this AplazamePayByWebPost.  # noqa: E501
        :rtype: list[AplazameOrderItem]
        """
        return self._order_items

    @order_items.setter
    def order_items(self, order_items):
        """Sets the order_items of this AplazamePayByWebPost.


        :param order_items: The order_items of this AplazamePayByWebPost.  # noqa: E501
        :type: list[AplazameOrderItem]
        """
        if order_items is None:
            raise ValueError("Invalid value for `order_items`, must not be `None`")  # noqa: E501

        self._order_items = order_items

    @property
    def customer(self):
        """Gets the customer of this AplazamePayByWebPost.  # noqa: E501


        :return: The customer of this AplazamePayByWebPost.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this AplazamePayByWebPost.


        :param customer: The customer of this AplazamePayByWebPost.  # noqa: E501
        :type: Customer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AplazamePayByWebPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AplazamePayByWebPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
