# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments  # noqa: E501

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.property_validation_country import PropertyValidationCountry  # noqa: F401,E501
from swagger_client.models.property_validation_string import PropertyValidationString  # noqa: F401,E501
from swagger_client.models.t_address_validation_result import TAddressValidationResult  # noqa: F401,E501
from swagger_client.models.t_kyc_file_details import TKycFileDetails  # noqa: F401,E501
from swagger_client.models.t_telephone_validation_result import TTelephoneValidationResult  # noqa: F401,E501


class KycLegalUserDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'PropertyValidationString',
        'contact_first_name': 'PropertyValidationString',
        'contact_last_name': 'PropertyValidationString',
        'fiscal_address': 'TAddressValidationResult',
        'telephone': 'TTelephoneValidationResult',
        'country': 'PropertyValidationCountry',
        'fiscal_id': 'PropertyValidationString',
        'fiscal_id_document': 'TKycFileDetails',
        'name': 'PropertyValidationString',
        'power_of_attorney': 'TKycFileDetails',
        'registration_proof': 'TKycFileDetails',
        'share_capital_increase': 'TKycFileDetails',
        'shareholder_declaration': 'TKycFileDetails',
        'statute': 'TKycFileDetails'
    }

    attribute_map = {
        'email': 'Email',
        'contact_first_name': 'ContactFirstName',
        'contact_last_name': 'ContactLastName',
        'fiscal_address': 'FiscalAddress',
        'telephone': 'Telephone',
        'country': 'Country',
        'fiscal_id': 'FiscalId',
        'fiscal_id_document': 'FiscalIdDocument',
        'name': 'Name',
        'power_of_attorney': 'PowerOfAttorney',
        'registration_proof': 'RegistrationProof',
        'share_capital_increase': 'ShareCapitalIncrease',
        'shareholder_declaration': 'ShareholderDeclaration',
        'statute': 'Statute'
    }

    def __init__(self, email=None, contact_first_name=None, contact_last_name=None, fiscal_address=None, telephone=None, country=None, fiscal_id=None, fiscal_id_document=None, name=None, power_of_attorney=None, registration_proof=None, share_capital_increase=None, shareholder_declaration=None, statute=None):  # noqa: E501
        """KycLegalUserDataDto - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._contact_first_name = None
        self._contact_last_name = None
        self._fiscal_address = None
        self._telephone = None
        self._country = None
        self._fiscal_id = None
        self._fiscal_id_document = None
        self._name = None
        self._power_of_attorney = None
        self._registration_proof = None
        self._share_capital_increase = None
        self._shareholder_declaration = None
        self._statute = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if contact_first_name is not None:
            self.contact_first_name = contact_first_name
        if contact_last_name is not None:
            self.contact_last_name = contact_last_name
        if fiscal_address is not None:
            self.fiscal_address = fiscal_address
        if telephone is not None:
            self.telephone = telephone
        if country is not None:
            self.country = country
        if fiscal_id is not None:
            self.fiscal_id = fiscal_id
        if fiscal_id_document is not None:
            self.fiscal_id_document = fiscal_id_document
        if name is not None:
            self.name = name
        if power_of_attorney is not None:
            self.power_of_attorney = power_of_attorney
        if registration_proof is not None:
            self.registration_proof = registration_proof
        if share_capital_increase is not None:
            self.share_capital_increase = share_capital_increase
        if shareholder_declaration is not None:
            self.shareholder_declaration = shareholder_declaration
        if statute is not None:
            self.statute = statute

    @property
    def email(self):
        """Gets the email of this KycLegalUserDataDto.  # noqa: E501


        :return: The email of this KycLegalUserDataDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this KycLegalUserDataDto.


        :param email: The email of this KycLegalUserDataDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._email = email

    @property
    def contact_first_name(self):
        """Gets the contact_first_name of this KycLegalUserDataDto.  # noqa: E501

        The name of the user  # noqa: E501

        :return: The contact_first_name of this KycLegalUserDataDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._contact_first_name

    @contact_first_name.setter
    def contact_first_name(self, contact_first_name):
        """Sets the contact_first_name of this KycLegalUserDataDto.

        The name of the user  # noqa: E501

        :param contact_first_name: The contact_first_name of this KycLegalUserDataDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._contact_first_name = contact_first_name

    @property
    def contact_last_name(self):
        """Gets the contact_last_name of this KycLegalUserDataDto.  # noqa: E501

        The last name of the user  # noqa: E501

        :return: The contact_last_name of this KycLegalUserDataDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._contact_last_name

    @contact_last_name.setter
    def contact_last_name(self, contact_last_name):
        """Sets the contact_last_name of this KycLegalUserDataDto.

        The last name of the user  # noqa: E501

        :param contact_last_name: The contact_last_name of this KycLegalUserDataDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._contact_last_name = contact_last_name

    @property
    def fiscal_address(self):
        """Gets the fiscal_address of this KycLegalUserDataDto.  # noqa: E501

        The address  # noqa: E501

        :return: The fiscal_address of this KycLegalUserDataDto.  # noqa: E501
        :rtype: TAddressValidationResult
        """
        return self._fiscal_address

    @fiscal_address.setter
    def fiscal_address(self, fiscal_address):
        """Sets the fiscal_address of this KycLegalUserDataDto.

        The address  # noqa: E501

        :param fiscal_address: The fiscal_address of this KycLegalUserDataDto.  # noqa: E501
        :type: TAddressValidationResult
        """

        self._fiscal_address = fiscal_address

    @property
    def telephone(self):
        """Gets the telephone of this KycLegalUserDataDto.  # noqa: E501


        :return: The telephone of this KycLegalUserDataDto.  # noqa: E501
        :rtype: TTelephoneValidationResult
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this KycLegalUserDataDto.


        :param telephone: The telephone of this KycLegalUserDataDto.  # noqa: E501
        :type: TTelephoneValidationResult
        """

        self._telephone = telephone

    @property
    def country(self):
        """Gets the country of this KycLegalUserDataDto.  # noqa: E501

        The user’s country of residence. ISO 3166-1 alpha-2 format is expected  # noqa: E501

        :return: The country of this KycLegalUserDataDto.  # noqa: E501
        :rtype: PropertyValidationCountry
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this KycLegalUserDataDto.

        The user’s country of residence. ISO 3166-1 alpha-2 format is expected  # noqa: E501

        :param country: The country of this KycLegalUserDataDto.  # noqa: E501
        :type: PropertyValidationCountry
        """

        self._country = country

    @property
    def fiscal_id(self):
        """Gets the fiscal_id of this KycLegalUserDataDto.  # noqa: E501


        :return: The fiscal_id of this KycLegalUserDataDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._fiscal_id

    @fiscal_id.setter
    def fiscal_id(self, fiscal_id):
        """Sets the fiscal_id of this KycLegalUserDataDto.


        :param fiscal_id: The fiscal_id of this KycLegalUserDataDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._fiscal_id = fiscal_id

    @property
    def fiscal_id_document(self):
        """Gets the fiscal_id_document of this KycLegalUserDataDto.  # noqa: E501

        Identity card file reference  # noqa: E501

        :return: The fiscal_id_document of this KycLegalUserDataDto.  # noqa: E501
        :rtype: TKycFileDetails
        """
        return self._fiscal_id_document

    @fiscal_id_document.setter
    def fiscal_id_document(self, fiscal_id_document):
        """Sets the fiscal_id_document of this KycLegalUserDataDto.

        Identity card file reference  # noqa: E501

        :param fiscal_id_document: The fiscal_id_document of this KycLegalUserDataDto.  # noqa: E501
        :type: TKycFileDetails
        """

        self._fiscal_id_document = fiscal_id_document

    @property
    def name(self):
        """Gets the name of this KycLegalUserDataDto.  # noqa: E501


        :return: The name of this KycLegalUserDataDto.  # noqa: E501
        :rtype: PropertyValidationString
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KycLegalUserDataDto.


        :param name: The name of this KycLegalUserDataDto.  # noqa: E501
        :type: PropertyValidationString
        """

        self._name = name

    @property
    def power_of_attorney(self):
        """Gets the power_of_attorney of this KycLegalUserDataDto.  # noqa: E501


        :return: The power_of_attorney of this KycLegalUserDataDto.  # noqa: E501
        :rtype: TKycFileDetails
        """
        return self._power_of_attorney

    @power_of_attorney.setter
    def power_of_attorney(self, power_of_attorney):
        """Sets the power_of_attorney of this KycLegalUserDataDto.


        :param power_of_attorney: The power_of_attorney of this KycLegalUserDataDto.  # noqa: E501
        :type: TKycFileDetails
        """

        self._power_of_attorney = power_of_attorney

    @property
    def registration_proof(self):
        """Gets the registration_proof of this KycLegalUserDataDto.  # noqa: E501


        :return: The registration_proof of this KycLegalUserDataDto.  # noqa: E501
        :rtype: TKycFileDetails
        """
        return self._registration_proof

    @registration_proof.setter
    def registration_proof(self, registration_proof):
        """Sets the registration_proof of this KycLegalUserDataDto.


        :param registration_proof: The registration_proof of this KycLegalUserDataDto.  # noqa: E501
        :type: TKycFileDetails
        """

        self._registration_proof = registration_proof

    @property
    def share_capital_increase(self):
        """Gets the share_capital_increase of this KycLegalUserDataDto.  # noqa: E501


        :return: The share_capital_increase of this KycLegalUserDataDto.  # noqa: E501
        :rtype: TKycFileDetails
        """
        return self._share_capital_increase

    @share_capital_increase.setter
    def share_capital_increase(self, share_capital_increase):
        """Sets the share_capital_increase of this KycLegalUserDataDto.


        :param share_capital_increase: The share_capital_increase of this KycLegalUserDataDto.  # noqa: E501
        :type: TKycFileDetails
        """

        self._share_capital_increase = share_capital_increase

    @property
    def shareholder_declaration(self):
        """Gets the shareholder_declaration of this KycLegalUserDataDto.  # noqa: E501


        :return: The shareholder_declaration of this KycLegalUserDataDto.  # noqa: E501
        :rtype: TKycFileDetails
        """
        return self._shareholder_declaration

    @shareholder_declaration.setter
    def shareholder_declaration(self, shareholder_declaration):
        """Sets the shareholder_declaration of this KycLegalUserDataDto.


        :param shareholder_declaration: The shareholder_declaration of this KycLegalUserDataDto.  # noqa: E501
        :type: TKycFileDetails
        """

        self._shareholder_declaration = shareholder_declaration

    @property
    def statute(self):
        """Gets the statute of this KycLegalUserDataDto.  # noqa: E501


        :return: The statute of this KycLegalUserDataDto.  # noqa: E501
        :rtype: TKycFileDetails
        """
        return self._statute

    @statute.setter
    def statute(self, statute):
        """Sets the statute of this KycLegalUserDataDto.


        :param statute: The statute of this KycLegalUserDataDto.  # noqa: E501
        :type: TKycFileDetails
        """

        self._statute = statute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycLegalUserDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycLegalUserDataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
